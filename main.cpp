#include "DxLib.h"
#include <list>
#include <vector>
#include <memory>
#include "Enemy.h"
#include "Player.h"

// ウィンドウのタイトルに表示する文字列
const char TITLE[] = "LE2A_スズキ_リオン";

// ウィンドウ横幅
const int WIN_WIDTH = 600;

// ウィンドウ縦幅
const int WIN_HEIGHT = 400;

bool BallCollision(const Vector2& a, const float& aSize, const Vector2& b, const float& bSize);

int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine,
                   _In_ int nCmdShow) {
	// ウィンドウモードに設定
	ChangeWindowMode(TRUE);

	// ウィンドウサイズを手動では変更させず、
	// かつウィンドウサイズに合わせて拡大できないようにする
	SetWindowSizeChangeEnableFlag(FALSE, FALSE);

	// タイトルを変更
	SetMainWindowText(TITLE);

	// 画面サイズの最大サイズ、カラービット数を設定(モニターの解像度に合わせる)
	SetGraphMode(WIN_WIDTH, WIN_HEIGHT, 32);

	// 画面サイズを設定(解像度との比率で設定)
	SetWindowSizeExtendRate(1.0);

	// 画面の背景色を設定する
	SetBackgroundColor(0x00, 0x00, 0x00);

	// DXlibの初期化
	if (DxLib_Init() == -1) { return -1; }

	// (ダブルバッファ)描画先グラフィック領域は裏面を指定
	SetDrawScreen(DX_SCREEN_BACK);

	// 画像などのリソースデータの変数宣言と読み込み

	Player player_;
	player_.Ini();

	//敵
	std::vector< std::unique_ptr<Enemy>> enemies_;

	for (int i = 0; i < 5; i++) {
		std::unique_ptr<Enemy> newEnemy = std::make_unique<Enemy>();
		Vector2 pos = {
			(float)100 + 50 * i,
			(float)100
		};

		newEnemy->Ini(pos, &player_);

		enemies_.emplace_back(std::move(newEnemy));
	}

	// 最新のキーボード情報用
	char keys[256] = {0};

	// 1ループ(フレーム)前のキーボード情報
	char oldkeys[256] = {0};

	// ゲームループ
	while (true) {
		for (int i = 0; i < 256; i++) {
			oldkeys[i] = keys[i];
		}
		// 最新のキーボード情報だったものは1フレーム前のキーボード情報として保存
		// 最新のキーボード情報を取得
		GetHitKeyStateAll(keys);

		// 画面クリア
		ClearDrawScreen();
		//---------  ここからプログラムを記述  ----------//

		// 更新処理

		//敵更新
		for (std::unique_ptr<Enemy>& enemy : enemies_) {
			enemy->Update();
		}
		for (std::unique_ptr<Enemy>& enemy : enemies_) {
			if (enemy->GetAllDead()) {
				enemies_.clear();
			}
		}
		//プレイヤー更新
		player_.Update(keys);
		

		// 描画処理
		
		//敵描画
		for (std::unique_ptr<Enemy>& enemy : enemies_) {
			enemy->Draw();
		}
		//プレイヤー描画
		player_.Draw();

		//説明
		DrawFormatString(0, 0, 0xffffff, "WASD :移動");

		//---------  ここまでにプログラムを記述  ---------//
		// (ダブルバッファ)裏面
		ScreenFlip();

		// 20ミリ秒待機(疑似60FPS)
		WaitTimer(20);

		// Windowsシステムからくる情報を処理する
		if (ProcessMessage() == -1) {
			break;
		}

		// ESCキーが押されたらループから抜ける
		if (CheckHitKey(KEY_INPUT_ESCAPE) == 1) {
			break;
		}
	}
	// Dxライブラリ終了処理
	DxLib_End();

	// 正常終了
	return 0;
}


bool BallCollision(const Vector2& a, const float& aSize, const Vector2& b, const float& bSize) {
	float x, y;
	float r;

	x = (float)pow(b.x - a.x, 2);
	y = (float)pow(b.y - a.y, 2);

	float pos = x + y;

	r = (float)pow(aSize + bSize, 2);
	if (pos <= r) {
		return true;
	}
	return false;
}